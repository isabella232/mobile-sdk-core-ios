#if 0
#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.3.1 (swiftlang-1200.0.41 clang-1200.0.32.8)
#ifndef CORE_SWIFT_H
#define CORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Core",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS_NAMED("Behavior")
@interface MCCoreBehavior : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Behavior notified when the application’s UI is no longer visible on the screen.
SWIFT_CLASS_NAMED("AppBackgrounded")
@interface MCCoreAppBackgrounded : MCCoreBehavior
@end


/// Behavior notified when the application comes into the foreground and is “sticky”
SWIFT_CLASS_NAMED("AppForegrounded")
@interface MCCoreAppForegrounded : MCCoreBehavior
@end


/// Behavior notified when the application’s version changes.
SWIFT_CLASS_NAMED("AppVersionChanged")
@interface MCCoreAppVersionChanged : MCCoreBehavior
@end


///
SWIFT_CLASS_NAMED("AuthHeader")
@interface MCCoreAuthHeader : NSObject
/// Header key
@property (nonatomic, readonly, copy) NSString * _Nonnull key;
/// Header value
@property (nonatomic, readonly, copy) NSString * _Nonnull value;
/// Initializer for the AuthHeader.
/// \param key header key
///
/// \param value header value
///
- (nonnull instancetype)initWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSLock;

/// Protocol to adhere in order to provide an interface for extending modules to implement authentication.
SWIFT_PROTOCOL_NAMED("Authenticator")
@protocol MCCoreAuthenticator
/// Coordinates multiple threads of execution within the same app.
@property (nonatomic, readonly, strong) NSLock * _Nonnull lock;
/// Returns cached token header.
- (MCCoreAuthHeader * _Nullable)getCachedTokenHeader SWIFT_WARN_UNUSED_RESULT;
/// Refreshes auth token header.
- (MCCoreAuthHeader * _Nullable)refreshAuthTokenHeader SWIFT_WARN_UNUSED_RESULT;
/// Deletes cached token.
- (void)deleteCachedToken;
@end



/// This class allows modules to register observers to receive requested behavior event types.
/// Observers must adhere to the <a href="x-source-tag://BehaviorObserver">BehaviorObserver</a> protocol where the <a href="x-source-tag://BehaviorManager">BehaviorManager</a> will notify each observer via their respective <a href="x-source-tag://OnBehavior">onBehavior()</a> function. Behavior types that can be tracked include: (<a href="x-source-tag://BehaviorType">BehaviorType</a>)
SWIFT_CLASS_NAMED("BehaviorManager")
@interface MCCoreBehaviorManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Protocol to adhere to when creating an observer to listen to behavior events sent by the <a href="x-source-tag://BehaviorManager">BehaviorManager</a>
SWIFT_PROTOCOL_NAMED("BehaviorObserver")
@protocol MCCoreBehaviorObserver
/// Behavior types to observe.
@property (nonatomic, readonly, copy) NSSet<NSNumber *> * _Nonnull behaviorTypesToObserve;
/// Action that needs to be taken on behavior event sent by the <a href="x-source-tag://BehaviorManager">BehaviorManager</a>
/// \param behavior instance of behavior adopting <a href="x-source-tag://Behavior">Behavior</a> protocol
///
- (void)onBehaviorWithBehavior:(MCCoreBehavior * _Nonnull)behavior;
@end

/// An enumeration of behaviors to track recognized by the CoreSdk.
typedef SWIFT_ENUM_NAMED(NSInteger, MCCoreBehaviorType, "BehaviorType", open) {
/// App is forgrounded
  MCCoreBehaviorTypeAppForegrounded = 0,
/// App is backgrounded
  MCCoreBehaviorTypeAppBackgrounded = 1,
/// App version changed
  MCCoreBehaviorTypeAppVersionChanged = 2,
/// Screen entry
  MCCoreBehaviorTypeScreenEntry = 3,
};

@class MCCoreWrappedRequest;
@class MCCoreWrappedResponse;

/// This class is is a complete tuple-like wrapper that includes <a href="x-source-tag://WrappedRequest">WrappedRequest</a> and <a href="x-source-tag://WrappedResponse">WrappedResponse</a>
SWIFT_CLASS_NAMED("CompletedCall")
@interface MCCoreCompletedCall : NSObject
/// <a href="x-source-tag://WrappedRequest">WrappedRequest</a> instance
@property (nonatomic, readonly, strong) MCCoreWrappedRequest * _Nonnull wrappedRequest;
/// <a href="x-source-tag://WrappedResponse">WrappedResponse</a> instance
@property (nonatomic, readonly, strong) MCCoreWrappedResponse * _Nonnull wrappedResponse;
- (nonnull instancetype)init:(MCCoreWrappedRequest * _Nonnull)wrappedRequest :(MCCoreWrappedResponse * _Nonnull)wrappedResponse OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class MCCoreEncryptionManager;
@class MCCoreStorageManager;
@class MCCoreNetworkManager;

/// This class provides helper components for [CoreModule] subclasses
SWIFT_CLASS_NAMED("CoreComponents")
@interface MCCoreComponents : NSObject
/// <a href="x-source-tag://EncryptionManager">EncryptionManager</a> instance
@property (nonatomic, readonly, strong) MCCoreEncryptionManager * _Nonnull encryptionManager;
/// <a href="x-source-tag://StorageManager">StorageManager</a> instance
@property (nonatomic, readonly, strong) MCCoreStorageManager * _Nonnull storageManager;
/// <a href="x-source-tag://BehaviorManager">BehaviorManager</a> instance
@property (nonatomic, readonly, strong) MCCoreBehaviorManager * _Nonnull behaviorManager;
/// Creates network manager.
/// \param authenticator instance of (<a href="x-source-tag://Authenticator">Authenticator</a>)
///
///
/// returns:
/// instance of (<a href="x-source-tag://NetworkManager">NetworkManager</a>)
- (MCCoreNetworkManager * _Nonnull)createNetworkManagerWithAuthenticator:(id <MCCoreAuthenticator> _Nullable)authenticator SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol MCCoreModuleConfig;

/// CoreModule protocol that all registered modules adopt.
SWIFT_PROTOCOL_NAMED("CoreModule")
@protocol MCCoreModule
/// Sdk configuration info for debug purposes
@property (nonatomic, readonly, copy) NSString * _Nonnull state;
/// Registered core components
@property (nonatomic, strong) MCCoreComponents * _Nullable _coreComponents;
/// Core Module configuration
@property (nonatomic, readonly, strong) id <MCCoreModuleConfig> _Nonnull coreModuleConfig;
@end


/// Core Module Configuration protocol that all registered modules adopt as configuration.
SWIFT_PROTOCOL_NAMED("CoreModuleConfig")
@protocol MCCoreModuleConfig
/// Module name
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Application ID
@property (nonatomic, readonly, copy) NSString * _Nonnull appId;
@end


SWIFT_CLASS_NAMED("CoreModuleHelper")
@interface MCCoreModuleHelper : NSObject <MCCoreModule>
@property (nonatomic, copy) NSString * _Nonnull state;
@property (nonatomic, strong) MCCoreComponents * _Nullable _coreComponents;
@property (nonatomic, strong) id <MCCoreModuleConfig> _Nonnull coreModuleConfig;
@property (nonatomic, readonly, strong) MCCoreComponents * _Nonnull coreComponents;
/// Module name (defaulted to lowercase)
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Application ID
@property (nonatomic, readonly, copy) NSString * _Nonnull appId;
- (nonnull instancetype)initWithConfig:(id <MCCoreModuleConfig> _Nonnull)config OBJC_DESIGNATED_INITIALIZER;
- (void)registerModule;
- (void)unregisterModule;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Encryption Manager class is used for creating a unique encryption key (AES 256 encryption) for modules.
SWIFT_CLASS_NAMED("EncryptionManager")
@interface MCCoreEncryptionManager : NSObject
/// Encrypts a String value using AES 256
/// \param string String to be encrypted with unicode String encoding
///
///
/// returns:
/// The encrypted String data. Returns nil if the data is unable to be encrypted
- (NSData * _Nullable)encryptWithString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
/// Decrypts data of a String and returns the String representation of the data
/// \param stringData The AES 256 encrypted data representation of a String
///
///
/// returns:
/// The String value associated with the encrypted data provided. Returns nil if the data is unable to be encrypted
- (NSString * _Nullable)decryptWithStringData:(NSData * _Nonnull)stringData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum MCCoreLogLevel : NSInteger;

/// Defines how logs are being outputted.
SWIFT_CLASS_NAMED("LogOutputter")
@interface MCCoreLogOutputter : NSObject
/// Captures logs using the native unified logging system (log level must be defined as OSLogType)
/// \param level (<a href="x-source-tag://MCLogLevel">MCLogLevel</a>) instance to define log level detail
///
/// \param subsystem Subsystem identifying  a specific subsystem of app
///
/// \param category System-defined category
///
/// \param message Message
///
- (void)outWithLevel:(enum MCCoreLogLevel)level subsystem:(NSString * _Nonnull)subsystem category:(NSString * _Nonnull)category message:(NSString * _Nonnull)message;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Logger protocol that loggers must adopt.
SWIFT_PROTOCOL_NAMED("Logger")
@protocol MCCoreLogger
/// Values to be redacted from logs
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull redactedValues;
/// (<a href="x-source-tag://MCLogLevel">MCLogLevel</a>) instance to define log level detail
@property (nonatomic) enum MCCoreLogLevel logLevel;
/// (<a href="x-source-tag://LogOutputter">LogOutputter</a>) instance to define log level detail
@property (nonatomic, strong) MCCoreLogOutputter * _Nullable logOutputter;
/// Subsystem identifying a specific subsystem of an app
@property (nonatomic, readonly, copy) NSString * _Nonnull subsystem;
@end


SWIFT_CLASS_NAMED("LoggerHelper")
@interface MCCoreLoggerHelper : NSObject <MCCoreLogger>
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull redactedValues;
@property (nonatomic) enum MCCoreLogLevel logLevel;
@property (nonatomic, strong) MCCoreLogOutputter * _Nullable logOutputter;
@property (nonatomic, copy) NSString * _Nonnull subsystem;
- (nonnull instancetype)initWithSubsystem:(NSString * _Nonnull)subsystem logLevel:(enum MCCoreLogLevel)logLevel OBJC_DESIGNATED_INITIALIZER;
- (void)debugWithCategory:(NSString * _Nonnull)category message:(NSString * _Nonnull)message;
- (void)infoWithCategory:(NSString * _Nonnull)category message:(NSString * _Nonnull)message;
- (void)warningWithCategory:(NSString * _Nonnull)category message:(NSString * _Nonnull)message;
- (void)errorWithCategory:(NSString * _Nonnull)category message:(NSString * _Nonnull)message;
- (void)registerLogger;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Log Level detail definition
typedef SWIFT_ENUM_NAMED(NSInteger, MCCoreLogLevel, "MCLogLevel", open) {
/// Debug log level
  MCCoreLogLevelDebug = 0,
/// Info log level
  MCCoreLogLevelInfo = 1,
/// Warn log level
  MCCoreLogLevelWarn = 2,
/// Error log level
  MCCoreLogLevelError = 3,
/// None  log level
  MCCoreLogLevelNone = 4,
};

@class MCCoreSecurePrefs;

/// This class is a helper for making synchronous and asynchronous network calls with an optional authenticator.
SWIFT_CLASS_NAMED("NetworkManager")
@interface MCCoreNetworkManager : NSObject
- (nonnull instancetype)initWithNetworkPreferences:(MCCoreSecurePrefs * _Nonnull)networkPreferences authenticator:(id <MCCoreAuthenticator> _Nullable)authenticator OBJC_DESIGNATED_INITIALIZER;
/// Executes synchronous network call.
/// \param wrappedRequest instance of <a href="x-source-tag://WrappedRequest">WrappedRequest</a>
///
///
/// returns:
/// instance of <a href="x-source-tag://CompletedCall">CompletedCall</a> that contains both the request and the response
- (MCCoreCompletedCall * _Nonnull)executeSync:(MCCoreWrappedRequest * _Nonnull)wrappedRequest SWIFT_WARN_UNUSED_RESULT;
/// Executes aynchronous network call.
/// \param wrappedRequest instance of <a href="x-source-tag://WrappedRequest">WrappedRequest</a>
///
/// \param completionHandler callback on response
///
- (void)executeAsync:(MCCoreWrappedRequest * _Nonnull)wrappedRequest completionHandler:(void (^ _Nonnull)(MCCoreCompletedCall * _Nonnull))completionHandler;
/// Temporarily blocks retries of given request. Waiting time is stored in the network preferences under the requests name key.
/// \param requestName Name of the request
///
///
/// returns:
/// Bool
- (BOOL)isBlockedByRetryAfter:(NSString * _Nonnull)requestName SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// An enumaration of Network Manager Error Options.
typedef SWIFT_ENUM_NAMED(NSInteger, MCCoreNetworkManagerError, "NetworkManagerError", open) {
/// Fetching token failed
  MCCoreNetworkManagerErrorTokenFetchFailed = 0,
/// Refreshing token failed
  MCCoreNetworkManagerErrorTokenRefreshFailed = 1,
/// Too Many requests
  MCCoreNetworkManagerErrorTooManyRequests = 2,
/// Request is already in flight
  MCCoreNetworkManagerErrorRequestAlreadyInFlight = 3,
};
static NSString * _Nonnull const MCCoreNetworkManagerErrorDomain = @"Core.NetworkManagerError";


/// Behavior notified as the user traverses through the application’s Activities.
SWIFT_CLASS_NAMED("ScreenEntry")
@interface MCCoreScreenEntry : MCCoreBehavior
@end


/// This class provides helper methods for storage.
SWIFT_CLASS_NAMED("SecurePrefs")
@interface MCCoreSecurePrefs : NSObject
/// Stores a String value with the provided key. Key and value are both encrypted.
/// \param value The String value to be encrypted and stored
///
/// \param key The key used to extract the value from storage
///
- (void)setString:(NSString * _Nonnull)value for:(NSString * _Nonnull)key;
/// Stores a Int value with the provided key. Key and value are both encrypted.
/// \param value The Int value to be encrypted and stored
///
/// \param key The key used to extract the value from storage
///
- (void)setInt:(NSInteger)value for:(NSString * _Nonnull)key;
/// Stores a Bool value with the provided key. Key and value are both encrypted.
/// \param value The Bool value to be encrypted and stored
///
/// \param key The key used to extract the value from storage
///
- (void)setBool:(BOOL)value for:(NSString * _Nonnull)key;
/// Sets a Float value in the keychain with the provided key. Key and value are both encrypted.
/// \param value The Float value to be encrypted and stored
///
/// \param key The key used to extract the value from storage
///
- (void)setFloat:(float)value for:(NSString * _Nonnull)key;
/// Sets a Double value in the keychain with the provided key. Key and value are both encrypted.
/// \param value The Double value to be encrypted and stored
///
/// \param key The key used to extract the value from storage
///
- (void)setDouble:(double)value for:(NSString * _Nonnull)key;
/// Extracts the String value for the provided key in storage
/// \param key The key associated with the value being stored
///
///
/// returns:
/// The string value stored or nil if not present
- (NSString * _Nullable)stringForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Removes the value associated with the provided key
/// \param key The key for the value to be removed
///
- (void)removeWithKey:(NSString * _Nonnull)key;
/// Clears all data stored in the SecurePrefs Object and makes it a dead object unable to save or extract data. SecurePrefs will have to be re-initialized again.
- (void)clearAll;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class provides helper for storing encrypted key value pairs.
SWIFT_CLASS_NAMED("StorageManager")
@interface MCCoreStorageManager : NSObject
/// Creates a <a href="x-source-tag://SecurePrefs">SecurePrefs</a> object used to store encrypted key value pairs. Using the same name references the same storage location.
/// \code
/// let securePrefs1 = getSecurePrefs(name: "Hello")
/// let securePrefs2 = getSecurePrefs(name: "Hello")
///
/// securePrefs1.setString("first", for: "Key")
/// securePrefs2.setString("second", for: "Key")
///
/// let value = securePrefs1.stringForKey("Key")
/// value now equals "second"
///
/// \endcode\param name location name to store the secure preferences data
///
///
/// returns:
/// A <a href="x-source-tag://SecurePrefs">SecurePrefs</a> object associated with the name provided.
- (MCCoreSecurePrefs * _Nonnull)getOrCreateSecurePrefsWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Provides a generated string prefix for a given file
/// \param fileName String name of file to be given a prefix
///
///
/// returns:
/// String result of the file name prefixed with module and unique installation Id
- (NSString * _Nonnull)getFilenameForModuleInstallationWithFileName:(NSString * _Nonnull)fileName SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// This class is a network request wrapper. Use <a href="x-source-tag://Builder">Builder</a> for request building.
SWIFT_CLASS_NAMED("WrappedRequest")
@interface MCCoreWrappedRequest : NSObject
/// Network call request url
@property (nonatomic, copy) NSURLRequest * _Nonnull request;
/// Request name
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Request rate limit
@property (nonatomic, readonly) NSTimeInterval rateLimit;
/// Request tag
@property (nonatomic, readonly, copy) NSString * _Nullable tag;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This is a helper class for request building.
SWIFT_CLASS_NAMED("Builder")
@interface MCCoreWrappedRequestBuilder : NSObject
/// Initializer for the Builder.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Sets the Http method.
/// \param method http method
///
///
/// returns:
/// self
- (MCCoreWrappedRequestBuilder * _Nonnull)method:(NSString * _Nonnull)method SWIFT_WARN_UNUSED_RESULT;
/// Sets the network call request url.
/// \param url request url
///
///
/// returns:
/// self
- (MCCoreWrappedRequestBuilder * _Nonnull)url:(NSString * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Sets the network call request url.
/// \param base base request url
///
/// \param path request url path
///
///
/// returns:
/// self
- (MCCoreWrappedRequestBuilder * _Nonnull)urlWithBase:(NSString * _Nonnull)base path:(NSString * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
/// Adds or replaces existing header.
/// \param key header key
///
/// \param value header value
///
///
/// returns:
/// self
- (MCCoreWrappedRequestBuilder * _Nonnull)addOrReplaceHeaderWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
/// Sets payload of the request.
/// \param body payload
///
///
/// returns:
/// self
- (MCCoreWrappedRequestBuilder * _Nonnull)body:(NSData * _Nonnull)body SWIFT_WARN_UNUSED_RESULT;
/// Sets timeout on the request
/// \param seconds timeout in seconds
///
///
/// returns:
/// self
- (MCCoreWrappedRequestBuilder * _Nonnull)timeout:(NSTimeInterval)seconds SWIFT_WARN_UNUSED_RESULT;
/// Sets rate limiting on the requet
/// \param seconds rate limiting in seconds
///
///
/// returns:
/// self
- (MCCoreWrappedRequestBuilder * _Nonnull)rateLimit:(NSTimeInterval)seconds SWIFT_WARN_UNUSED_RESULT;
/// Sets name of the request
/// \param name request name
///
///
/// returns:
/// self
- (MCCoreWrappedRequestBuilder * _Nonnull)name:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Sets up tag on the request
/// \param tag request tag
///
///
/// returns:
/// self
- (MCCoreWrappedRequestBuilder * _Nonnull)tag:(NSString * _Nonnull)tag SWIFT_WARN_UNUSED_RESULT;
/// Builds request of given parameters.
///
/// returns:
/// <a href="x-source-tag://WrappedRequest">WrappedRequest</a> instance
- (MCCoreWrappedRequest * _Nullable)build SWIFT_WARN_UNUSED_RESULT;
@end

@class NSHTTPURLResponse;
@class NSURLResponse;

/// This class is a network response wrapper
SWIFT_CLASS_NAMED("WrappedResponse")
@interface MCCoreWrappedResponse : NSObject
/// Response data
@property (nonatomic, readonly, copy) NSData * _Nullable data;
/// Network Response to an HTTP URL load
@property (nonatomic, readonly, strong) NSHTTPURLResponse * _Nullable response;
/// Generic error (optional)
@property (nonatomic, readonly) NSError * _Nullable error;
/// Success status based on the response status code (200-299 is considered a successful call)
@property (nonatomic, readonly) BOOL isSuccess;
/// Autorization status based on the response status code (401 is unautorized)
@property (nonatomic, readonly) BOOL isUnauthorized;
/// Time left on the execution timespan of the request
@property (nonatomic, readonly) int64_t timeToExecute;
- (nonnull instancetype)initWithData:(NSData * _Nullable)data response:(NSURLResponse * _Nullable)response error:(NSError * _Nullable)error startTimeMillis:(int64_t)startTimeMillis endTimeMillis:(int64_t)endTimeMillis OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__i386__) && __i386__
// Generated by Apple Swift version 5.3.1 (swiftlang-1200.0.41 clang-1200.0.32.8)
#ifndef CORE_SWIFT_H
#define CORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Core",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS_NAMED("Behavior")
@interface MCCoreBehavior : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Behavior notified when the application’s UI is no longer visible on the screen.
SWIFT_CLASS_NAMED("AppBackgrounded")
@interface MCCoreAppBackgrounded : MCCoreBehavior
@end


/// Behavior notified when the application comes into the foreground and is “sticky”
SWIFT_CLASS_NAMED("AppForegrounded")
@interface MCCoreAppForegrounded : MCCoreBehavior
@end


/// Behavior notified when the application’s version changes.
SWIFT_CLASS_NAMED("AppVersionChanged")
@interface MCCoreAppVersionChanged : MCCoreBehavior
@end


///
SWIFT_CLASS_NAMED("AuthHeader")
@interface MCCoreAuthHeader : NSObject
/// Header key
@property (nonatomic, readonly, copy) NSString * _Nonnull key;
/// Header value
@property (nonatomic, readonly, copy) NSString * _Nonnull value;
/// Initializer for the AuthHeader.
/// \param key header key
///
/// \param value header value
///
- (nonnull instancetype)initWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSLock;

/// Protocol to adhere in order to provide an interface for extending modules to implement authentication.
SWIFT_PROTOCOL_NAMED("Authenticator")
@protocol MCCoreAuthenticator
/// Coordinates multiple threads of execution within the same app.
@property (nonatomic, readonly, strong) NSLock * _Nonnull lock;
/// Returns cached token header.
- (MCCoreAuthHeader * _Nullable)getCachedTokenHeader SWIFT_WARN_UNUSED_RESULT;
/// Refreshes auth token header.
- (MCCoreAuthHeader * _Nullable)refreshAuthTokenHeader SWIFT_WARN_UNUSED_RESULT;
/// Deletes cached token.
- (void)deleteCachedToken;
@end



/// This class allows modules to register observers to receive requested behavior event types.
/// Observers must adhere to the <a href="x-source-tag://BehaviorObserver">BehaviorObserver</a> protocol where the <a href="x-source-tag://BehaviorManager">BehaviorManager</a> will notify each observer via their respective <a href="x-source-tag://OnBehavior">onBehavior()</a> function. Behavior types that can be tracked include: (<a href="x-source-tag://BehaviorType">BehaviorType</a>)
SWIFT_CLASS_NAMED("BehaviorManager")
@interface MCCoreBehaviorManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Protocol to adhere to when creating an observer to listen to behavior events sent by the <a href="x-source-tag://BehaviorManager">BehaviorManager</a>
SWIFT_PROTOCOL_NAMED("BehaviorObserver")
@protocol MCCoreBehaviorObserver
/// Behavior types to observe.
@property (nonatomic, readonly, copy) NSSet<NSNumber *> * _Nonnull behaviorTypesToObserve;
/// Action that needs to be taken on behavior event sent by the <a href="x-source-tag://BehaviorManager">BehaviorManager</a>
/// \param behavior instance of behavior adopting <a href="x-source-tag://Behavior">Behavior</a> protocol
///
- (void)onBehaviorWithBehavior:(MCCoreBehavior * _Nonnull)behavior;
@end

/// An enumeration of behaviors to track recognized by the CoreSdk.
typedef SWIFT_ENUM_NAMED(NSInteger, MCCoreBehaviorType, "BehaviorType", open) {
/// App is forgrounded
  MCCoreBehaviorTypeAppForegrounded = 0,
/// App is backgrounded
  MCCoreBehaviorTypeAppBackgrounded = 1,
/// App version changed
  MCCoreBehaviorTypeAppVersionChanged = 2,
/// Screen entry
  MCCoreBehaviorTypeScreenEntry = 3,
};

@class MCCoreWrappedRequest;
@class MCCoreWrappedResponse;

/// This class is is a complete tuple-like wrapper that includes <a href="x-source-tag://WrappedRequest">WrappedRequest</a> and <a href="x-source-tag://WrappedResponse">WrappedResponse</a>
SWIFT_CLASS_NAMED("CompletedCall")
@interface MCCoreCompletedCall : NSObject
/// <a href="x-source-tag://WrappedRequest">WrappedRequest</a> instance
@property (nonatomic, readonly, strong) MCCoreWrappedRequest * _Nonnull wrappedRequest;
/// <a href="x-source-tag://WrappedResponse">WrappedResponse</a> instance
@property (nonatomic, readonly, strong) MCCoreWrappedResponse * _Nonnull wrappedResponse;
- (nonnull instancetype)init:(MCCoreWrappedRequest * _Nonnull)wrappedRequest :(MCCoreWrappedResponse * _Nonnull)wrappedResponse OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class MCCoreEncryptionManager;
@class MCCoreStorageManager;
@class MCCoreNetworkManager;

/// This class provides helper components for [CoreModule] subclasses
SWIFT_CLASS_NAMED("CoreComponents")
@interface MCCoreComponents : NSObject
/// <a href="x-source-tag://EncryptionManager">EncryptionManager</a> instance
@property (nonatomic, readonly, strong) MCCoreEncryptionManager * _Nonnull encryptionManager;
/// <a href="x-source-tag://StorageManager">StorageManager</a> instance
@property (nonatomic, readonly, strong) MCCoreStorageManager * _Nonnull storageManager;
/// <a href="x-source-tag://BehaviorManager">BehaviorManager</a> instance
@property (nonatomic, readonly, strong) MCCoreBehaviorManager * _Nonnull behaviorManager;
/// Creates network manager.
/// \param authenticator instance of (<a href="x-source-tag://Authenticator">Authenticator</a>)
///
///
/// returns:
/// instance of (<a href="x-source-tag://NetworkManager">NetworkManager</a>)
- (MCCoreNetworkManager * _Nonnull)createNetworkManagerWithAuthenticator:(id <MCCoreAuthenticator> _Nullable)authenticator SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol MCCoreModuleConfig;

/// CoreModule protocol that all registered modules adopt.
SWIFT_PROTOCOL_NAMED("CoreModule")
@protocol MCCoreModule
/// Sdk configuration info for debug purposes
@property (nonatomic, readonly, copy) NSString * _Nonnull state;
/// Registered core components
@property (nonatomic, strong) MCCoreComponents * _Nullable _coreComponents;
/// Core Module configuration
@property (nonatomic, readonly, strong) id <MCCoreModuleConfig> _Nonnull coreModuleConfig;
@end


/// Core Module Configuration protocol that all registered modules adopt as configuration.
SWIFT_PROTOCOL_NAMED("CoreModuleConfig")
@protocol MCCoreModuleConfig
/// Module name
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Application ID
@property (nonatomic, readonly, copy) NSString * _Nonnull appId;
@end


SWIFT_CLASS_NAMED("CoreModuleHelper")
@interface MCCoreModuleHelper : NSObject <MCCoreModule>
@property (nonatomic, copy) NSString * _Nonnull state;
@property (nonatomic, strong) MCCoreComponents * _Nullable _coreComponents;
@property (nonatomic, strong) id <MCCoreModuleConfig> _Nonnull coreModuleConfig;
@property (nonatomic, readonly, strong) MCCoreComponents * _Nonnull coreComponents;
/// Module name (defaulted to lowercase)
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Application ID
@property (nonatomic, readonly, copy) NSString * _Nonnull appId;
- (nonnull instancetype)initWithConfig:(id <MCCoreModuleConfig> _Nonnull)config OBJC_DESIGNATED_INITIALIZER;
- (void)registerModule;
- (void)unregisterModule;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Encryption Manager class is used for creating a unique encryption key (AES 256 encryption) for modules.
SWIFT_CLASS_NAMED("EncryptionManager")
@interface MCCoreEncryptionManager : NSObject
/// Encrypts a String value using AES 256
/// \param string String to be encrypted with unicode String encoding
///
///
/// returns:
/// The encrypted String data. Returns nil if the data is unable to be encrypted
- (NSData * _Nullable)encryptWithString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
/// Decrypts data of a String and returns the String representation of the data
/// \param stringData The AES 256 encrypted data representation of a String
///
///
/// returns:
/// The String value associated with the encrypted data provided. Returns nil if the data is unable to be encrypted
- (NSString * _Nullable)decryptWithStringData:(NSData * _Nonnull)stringData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum MCCoreLogLevel : NSInteger;

/// Defines how logs are being outputted.
SWIFT_CLASS_NAMED("LogOutputter")
@interface MCCoreLogOutputter : NSObject
/// Captures logs using the native unified logging system (log level must be defined as OSLogType)
/// \param level (<a href="x-source-tag://MCLogLevel">MCLogLevel</a>) instance to define log level detail
///
/// \param subsystem Subsystem identifying  a specific subsystem of app
///
/// \param category System-defined category
///
/// \param message Message
///
- (void)outWithLevel:(enum MCCoreLogLevel)level subsystem:(NSString * _Nonnull)subsystem category:(NSString * _Nonnull)category message:(NSString * _Nonnull)message;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Logger protocol that loggers must adopt.
SWIFT_PROTOCOL_NAMED("Logger")
@protocol MCCoreLogger
/// Values to be redacted from logs
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull redactedValues;
/// (<a href="x-source-tag://MCLogLevel">MCLogLevel</a>) instance to define log level detail
@property (nonatomic) enum MCCoreLogLevel logLevel;
/// (<a href="x-source-tag://LogOutputter">LogOutputter</a>) instance to define log level detail
@property (nonatomic, strong) MCCoreLogOutputter * _Nullable logOutputter;
/// Subsystem identifying a specific subsystem of an app
@property (nonatomic, readonly, copy) NSString * _Nonnull subsystem;
@end


SWIFT_CLASS_NAMED("LoggerHelper")
@interface MCCoreLoggerHelper : NSObject <MCCoreLogger>
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull redactedValues;
@property (nonatomic) enum MCCoreLogLevel logLevel;
@property (nonatomic, strong) MCCoreLogOutputter * _Nullable logOutputter;
@property (nonatomic, copy) NSString * _Nonnull subsystem;
- (nonnull instancetype)initWithSubsystem:(NSString * _Nonnull)subsystem logLevel:(enum MCCoreLogLevel)logLevel OBJC_DESIGNATED_INITIALIZER;
- (void)debugWithCategory:(NSString * _Nonnull)category message:(NSString * _Nonnull)message;
- (void)infoWithCategory:(NSString * _Nonnull)category message:(NSString * _Nonnull)message;
- (void)warningWithCategory:(NSString * _Nonnull)category message:(NSString * _Nonnull)message;
- (void)errorWithCategory:(NSString * _Nonnull)category message:(NSString * _Nonnull)message;
- (void)registerLogger;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Log Level detail definition
typedef SWIFT_ENUM_NAMED(NSInteger, MCCoreLogLevel, "MCLogLevel", open) {
/// Debug log level
  MCCoreLogLevelDebug = 0,
/// Info log level
  MCCoreLogLevelInfo = 1,
/// Warn log level
  MCCoreLogLevelWarn = 2,
/// Error log level
  MCCoreLogLevelError = 3,
/// None  log level
  MCCoreLogLevelNone = 4,
};

@class MCCoreSecurePrefs;

/// This class is a helper for making synchronous and asynchronous network calls with an optional authenticator.
SWIFT_CLASS_NAMED("NetworkManager")
@interface MCCoreNetworkManager : NSObject
- (nonnull instancetype)initWithNetworkPreferences:(MCCoreSecurePrefs * _Nonnull)networkPreferences authenticator:(id <MCCoreAuthenticator> _Nullable)authenticator OBJC_DESIGNATED_INITIALIZER;
/// Executes synchronous network call.
/// \param wrappedRequest instance of <a href="x-source-tag://WrappedRequest">WrappedRequest</a>
///
///
/// returns:
/// instance of <a href="x-source-tag://CompletedCall">CompletedCall</a> that contains both the request and the response
- (MCCoreCompletedCall * _Nonnull)executeSync:(MCCoreWrappedRequest * _Nonnull)wrappedRequest SWIFT_WARN_UNUSED_RESULT;
/// Executes aynchronous network call.
/// \param wrappedRequest instance of <a href="x-source-tag://WrappedRequest">WrappedRequest</a>
///
/// \param completionHandler callback on response
///
- (void)executeAsync:(MCCoreWrappedRequest * _Nonnull)wrappedRequest completionHandler:(void (^ _Nonnull)(MCCoreCompletedCall * _Nonnull))completionHandler;
/// Temporarily blocks retries of given request. Waiting time is stored in the network preferences under the requests name key.
/// \param requestName Name of the request
///
///
/// returns:
/// Bool
- (BOOL)isBlockedByRetryAfter:(NSString * _Nonnull)requestName SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// An enumaration of Network Manager Error Options.
typedef SWIFT_ENUM_NAMED(NSInteger, MCCoreNetworkManagerError, "NetworkManagerError", open) {
/// Fetching token failed
  MCCoreNetworkManagerErrorTokenFetchFailed = 0,
/// Refreshing token failed
  MCCoreNetworkManagerErrorTokenRefreshFailed = 1,
/// Too Many requests
  MCCoreNetworkManagerErrorTooManyRequests = 2,
/// Request is already in flight
  MCCoreNetworkManagerErrorRequestAlreadyInFlight = 3,
};
static NSString * _Nonnull const MCCoreNetworkManagerErrorDomain = @"Core.NetworkManagerError";


/// Behavior notified as the user traverses through the application’s Activities.
SWIFT_CLASS_NAMED("ScreenEntry")
@interface MCCoreScreenEntry : MCCoreBehavior
@end


/// This class provides helper methods for storage.
SWIFT_CLASS_NAMED("SecurePrefs")
@interface MCCoreSecurePrefs : NSObject
/// Stores a String value with the provided key. Key and value are both encrypted.
/// \param value The String value to be encrypted and stored
///
/// \param key The key used to extract the value from storage
///
- (void)setString:(NSString * _Nonnull)value for:(NSString * _Nonnull)key;
/// Stores a Int value with the provided key. Key and value are both encrypted.
/// \param value The Int value to be encrypted and stored
///
/// \param key The key used to extract the value from storage
///
- (void)setInt:(NSInteger)value for:(NSString * _Nonnull)key;
/// Stores a Bool value with the provided key. Key and value are both encrypted.
/// \param value The Bool value to be encrypted and stored
///
/// \param key The key used to extract the value from storage
///
- (void)setBool:(BOOL)value for:(NSString * _Nonnull)key;
/// Sets a Float value in the keychain with the provided key. Key and value are both encrypted.
/// \param value The Float value to be encrypted and stored
///
/// \param key The key used to extract the value from storage
///
- (void)setFloat:(float)value for:(NSString * _Nonnull)key;
/// Sets a Double value in the keychain with the provided key. Key and value are both encrypted.
/// \param value The Double value to be encrypted and stored
///
/// \param key The key used to extract the value from storage
///
- (void)setDouble:(double)value for:(NSString * _Nonnull)key;
/// Extracts the String value for the provided key in storage
/// \param key The key associated with the value being stored
///
///
/// returns:
/// The string value stored or nil if not present
- (NSString * _Nullable)stringForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Removes the value associated with the provided key
/// \param key The key for the value to be removed
///
- (void)removeWithKey:(NSString * _Nonnull)key;
/// Clears all data stored in the SecurePrefs Object and makes it a dead object unable to save or extract data. SecurePrefs will have to be re-initialized again.
- (void)clearAll;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This class provides helper for storing encrypted key value pairs.
SWIFT_CLASS_NAMED("StorageManager")
@interface MCCoreStorageManager : NSObject
/// Creates a <a href="x-source-tag://SecurePrefs">SecurePrefs</a> object used to store encrypted key value pairs. Using the same name references the same storage location.
/// \code
/// let securePrefs1 = getSecurePrefs(name: "Hello")
/// let securePrefs2 = getSecurePrefs(name: "Hello")
///
/// securePrefs1.setString("first", for: "Key")
/// securePrefs2.setString("second", for: "Key")
///
/// let value = securePrefs1.stringForKey("Key")
/// value now equals "second"
///
/// \endcode\param name location name to store the secure preferences data
///
///
/// returns:
/// A <a href="x-source-tag://SecurePrefs">SecurePrefs</a> object associated with the name provided.
- (MCCoreSecurePrefs * _Nonnull)getOrCreateSecurePrefsWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Provides a generated string prefix for a given file
/// \param fileName String name of file to be given a prefix
///
///
/// returns:
/// String result of the file name prefixed with module and unique installation Id
- (NSString * _Nonnull)getFilenameForModuleInstallationWithFileName:(NSString * _Nonnull)fileName SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// This class is a network request wrapper. Use <a href="x-source-tag://Builder">Builder</a> for request building.
SWIFT_CLASS_NAMED("WrappedRequest")
@interface MCCoreWrappedRequest : NSObject
/// Network call request url
@property (nonatomic, copy) NSURLRequest * _Nonnull request;
/// Request name
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Request rate limit
@property (nonatomic, readonly) NSTimeInterval rateLimit;
/// Request tag
@property (nonatomic, readonly, copy) NSString * _Nullable tag;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This is a helper class for request building.
SWIFT_CLASS_NAMED("Builder")
@interface MCCoreWrappedRequestBuilder : NSObject
/// Initializer for the Builder.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Sets the Http method.
/// \param method http method
///
///
/// returns:
/// self
- (MCCoreWrappedRequestBuilder * _Nonnull)method:(NSString * _Nonnull)method SWIFT_WARN_UNUSED_RESULT;
/// Sets the network call request url.
/// \param url request url
///
///
/// returns:
/// self
- (MCCoreWrappedRequestBuilder * _Nonnull)url:(NSString * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Sets the network call request url.
/// \param base base request url
///
/// \param path request url path
///
///
/// returns:
/// self
- (MCCoreWrappedRequestBuilder * _Nonnull)urlWithBase:(NSString * _Nonnull)base path:(NSString * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
/// Adds or replaces existing header.
/// \param key header key
///
/// \param value header value
///
///
/// returns:
/// self
- (MCCoreWrappedRequestBuilder * _Nonnull)addOrReplaceHeaderWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
/// Sets payload of the request.
/// \param body payload
///
///
/// returns:
/// self
- (MCCoreWrappedRequestBuilder * _Nonnull)body:(NSData * _Nonnull)body SWIFT_WARN_UNUSED_RESULT;
/// Sets timeout on the request
/// \param seconds timeout in seconds
///
///
/// returns:
/// self
- (MCCoreWrappedRequestBuilder * _Nonnull)timeout:(NSTimeInterval)seconds SWIFT_WARN_UNUSED_RESULT;
/// Sets rate limiting on the requet
/// \param seconds rate limiting in seconds
///
///
/// returns:
/// self
- (MCCoreWrappedRequestBuilder * _Nonnull)rateLimit:(NSTimeInterval)seconds SWIFT_WARN_UNUSED_RESULT;
/// Sets name of the request
/// \param name request name
///
///
/// returns:
/// self
- (MCCoreWrappedRequestBuilder * _Nonnull)name:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Sets up tag on the request
/// \param tag request tag
///
///
/// returns:
/// self
- (MCCoreWrappedRequestBuilder * _Nonnull)tag:(NSString * _Nonnull)tag SWIFT_WARN_UNUSED_RESULT;
/// Builds request of given parameters.
///
/// returns:
/// <a href="x-source-tag://WrappedRequest">WrappedRequest</a> instance
- (MCCoreWrappedRequest * _Nullable)build SWIFT_WARN_UNUSED_RESULT;
@end

@class NSHTTPURLResponse;
@class NSURLResponse;

/// This class is a network response wrapper
SWIFT_CLASS_NAMED("WrappedResponse")
@interface MCCoreWrappedResponse : NSObject
/// Response data
@property (nonatomic, readonly, copy) NSData * _Nullable data;
/// Network Response to an HTTP URL load
@property (nonatomic, readonly, strong) NSHTTPURLResponse * _Nullable response;
/// Generic error (optional)
@property (nonatomic, readonly) NSError * _Nullable error;
/// Success status based on the response status code (200-299 is considered a successful call)
@property (nonatomic, readonly) BOOL isSuccess;
/// Autorization status based on the response status code (401 is unautorized)
@property (nonatomic, readonly) BOOL isUnauthorized;
/// Time left on the execution timespan of the request
@property (nonatomic, readonly) int64_t timeToExecute;
- (nonnull instancetype)initWithData:(NSData * _Nullable)data response:(NSURLResponse * _Nullable)response error:(NSError * _Nullable)error startTimeMillis:(int64_t)startTimeMillis endTimeMillis:(int64_t)endTimeMillis OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
